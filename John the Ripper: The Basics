john [options] [file path]

    john: Invokes the John the Ripper program
    [options]: Specifies the options you want to use
    [file path]: The file containing the hash you’re trying to crack; if it’s in the same directory, you won’t need to name a path, just the file.



John has built-in features to detect what type of hash it’s being given and to select appropriate rules and formats to crack it for you; 
this isn’t always the best idea as it can be unreliable, but if you can’t identify what hash type you’re working with and want to try cracking it, it can be a good option! 
To do this, we use the following syntax:

john --wordlist=[path to wordlist] [path to file]

    --wordlist=: Specifies using wordlist mode, reading from the file that you supply in the provided path
    [path to wordlist]: The path to the wordlist you’re using, as described in the previous task

EX: john --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt



Sometimes, John won’t play nicely with automatically recognising and loading hashes, but that’s okay! We can use other tools to identify the hash and then set John to a specific format.
There are multiple ways to do this, such as using an online hash identifier like: https://hashes.com/en/tools/hash_identifier








Format-Specific Cracking

Once you have identified the hash that you’re dealing with, you can tell John to use it while cracking the provided hash using the following syntax:

john --format=[format] --wordlist=[path to wordlist] [path to file]

    --format=: This is the flag to tell John that you’re giving it a hash of a specific format and to use the following format to crack it
    [format]: The format that the hash is in

EX: john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt

 if you’re dealing with a standard hash type, e.g. md5 as in the example above, you have to prefix it with raw- to tell John you’re just dealing with a standard hash type







NThash
is the hash format modern Windows operating system machines use to store user and service passwords. It’s also commonly referred to as NTLM, which references the previous version of Windows format for hashing passwords known as LM, thus NT/LM.

EX: john --format=nt --wordlist=/usr/share/wordlists/rockyou.txt ntlm_hashes.txt







The /etc/shadow file is the file on Linux machines where password hashes are stored.

John can be very particular about the formats it needs data in to be able to work with it; for this reason, to crack /etc/shadow passwords, you must combine it with the /etc/passwd file for John to understand the data it’s being given. 
To do this, we use a tool built into the John suite of tools called unshadow

unshadow [path to passwd] [path to shadow]

    unshadow: Invokes the unshadow tool
    [path to passwd]: The file that contains the copy of the /etc/passwd file you’ve taken from the target machine
    [path to shadow]: The file that contains the copy of the /etc/shadow file you’ve taken from the target machine

EX: unshadow local_passwd local_shadow > unshadowed.txt

When using unshadow, you can either use the entire /etc/passwd and /etc/shadow files

We can then feed the output from unshadow, in our example use case called unshadowed.txt, directly into John. 
We should not need to specify a mode here as we have made the input specifically for John; however, in some cases, you will need to specify the format as we have done previously using: --format=sha512crypt

john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt







Word Mangling

Consider the username “Markus”.

Some possible passwords could be:

    Markus1, Markus2, Markus3 (etc.)
    MArkus, MARkus, MARKus (etc.)
    Markus!, Markus$, Markus* (etc.)


GECOS

John’s implementation of word mangling also features compatibility with the GECOS field of the UNIX operating system, as well as other UNIX-like operating systems such as Linux. 
GECOS stands for General Electric Comprehensive Operating System.
In the last task, we looked at the entries for both /etc/shadow and /etc/passwd. Looking closely, you will notice that the fields are separated by a colon :. 
The fifth field in the user account record is the GECOS field. It stores general information about the user, such as the user’s full name, office number, and telephone number, among other things. 
John can take information stored in those records, such as full name and home directory name, to add to the wordlist it generates when cracking /etc/shadow hashes with single crack mode.






Using Single Crack Mode

To use single crack mode, we use roughly the same syntax that we’ve used so far; for example, if we wanted to crack the password of the user named “Mike”, using the single mode, we’d use:

john --single --format=[format] [path to file]

    --single: This flag lets John know you want to use the single hash-cracking mode
    --format=[format]: As always, it is vital to identify the proper format.

EX: john --single --format=raw-sha256 hashes.txt

If you’re cracking hashes in single crack mode, you need to change the file format that you’re feeding John for it to understand what data to create a wordlist from. 
You do this by prepending the hash with the username that the hash belongs to, so according to the above example, we would change the file hashes.txt

From 1efee03cdcb96d90ad48ccc7b8666033

To mike:1efee03cdcb96d90ad48ccc7b8666033







How to create Custom Rules

Custom rules are defined in the john.conf file.
 It is usually located in /etc/john/john.conf if you have installed John using a package manager or built from source with make

The first line:

[List.Rules:THMRules] is used to define the name of your rule; this is what you will use to call your custom rule a John argument.

We then use a regex style pattern match to define where the word will be modified; again, we will only cover the primary and most common modifiers here:

    Az: Takes the word and appends it with the characters you define
    A0: Takes the word and prepends it with the characters you define
    c: Capitalises the character positionally


Lastly, we must define what characters should be appended, prepended or otherwise included. We do this by adding character sets in square brackets [ ] where they should be used. These follow the modifier patterns inside double quotes " ". Here are some common examples:

    [0-9]: Will include numbers 0-9
    [0]: Will include only the number 0
    [A-z]: Will include both upper and lowercase
    [A-Z]: Will include only uppercase letters
    [a-z]: Will include only lowercase letters

Please note that:

    [a]: Will include only a
    [!£$%@]: Will include the symbols !, £, $, %, and @


Putting this all together, to generate a wordlist from the rules that would match the example password Polopassword1! (assuming the word polopassword was in our wordlist), we would create a rule entry that looks like this:

[List.Rules:PoloPassword]

cAz"[0-9] [!£$%@]"

Utilises the following:

    c: Capitalises the first letter
    Az: Appends to the end of the word
    [0-9]: A number in the range 0-9
    [!£$%@]: The password is followed by one of these symbols



We could then call this custom rule a John argument using the  --rule=PoloPassword flag.

As a full command: john --wordlist=[path to wordlist] --rule=PoloPassword [path to file]








Zip2John

Similarly to the unshadow tool we used previously, we will use the zip2john tool to convert the Zip file into a hash format that John can understand and hopefully crack. The primary usage is like this:

zip2john [options] [zip file] > [output file]

    [options]: Allows you to pass specific checksum options to zip2john; this shouldn’t often be necessary
    [zip file]: The path to the Zip file you wish to get the hash of
    >: This redirects the output from this command to another file
    [output file]: This is the file that will store the output

EX: zip2john zipfile.zip > zip_hash.txt

We’re then able to take the file we output from zip2john in our example use case, zip_hash.txt, and, as we did with unshadow, feed it directly into John as we have made the input specifically for it.

john --wordlist=/usr/share/wordlists/rockyou.txt zip_hash.txt








Rar2John

The basic syntax is as follows:

rar2john [rar file] > [output file]

    rar2john: Invokes the rar2john tool
    [rar file]: The path to the RAR file you wish to get the hash of
    >: This redirects the output of this command to another file
    [output file]: This is the file that will store the output from the command

EX: /opt/john/rar2john rarfile.rar > rar_hash.txt

john --wordlist=/usr/share/wordlists/rockyou.txt rar_hash.txt








SSH2John

ssh2john converts the id_rsa private key, which is used to log in to the SSH session, into a hash format that John can work with.

ssh2john [id_rsa private key file] > [output file]

    ssh2john: Invokes the ssh2john tool
    [id_rsa private key file]: The path to the id_rsa file you wish to get the hash of
    >: This is the output director. We’re using it to redirect the output from this command to another file.
    [output file]: This is the file that will store the output from

EX: /opt/john/ssh2john.py id_rsa > id_rsa_hash.txt

For the final time, we’re feeding the file we output from ssh2john, which in our example use case is called id_rsa_hash.txt and, as we did with rar2john, we can use this seamlessly with John:

john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa_hash.txt






