Null Scan

The null scan does not set any flag; all six flag bits are set to zero.
Command: -sN

A TCP packet with no flags set will not trigger any response when it reaches an open port. 
Therefore, from Nmap’s perspective, a lack of reply in a null scan indicates that either the port is open or a firewall is blocking the packet. 
However, we expect the target server to respond with an RST packet if the port is closed. Consequently, we can use the lack of RST response to figure out the ports that are not closed: open or filtered.




FIN Scan

The FIN scan sends a TCP packet with the FIN flag set
Command: -sF
Similarly, no response will be sent if the TCP port is open. Again, Nmap cannot be sure if the port is open or if a firewall is blocking the traffic related to this TCP port.

However, the target system should respond with an RST if the port is closed. Consequently, we will be able to know which ports are closed and use this knowledge to infer the ports that are open or filtered. 
It's worth noting some firewalls will 'silently' drop the traffic without sending an RST.




Xmas Scan

An Xmas scan sets the FIN, PSH, and URG flags simultaneously.
Command: -sX

Like the Null scan and FIN scan, if an RST packet is received, it means that the port is closed. Otherwise, it will be reported as open|filtered.


------
One scenario where these three scan types can be efficient is when scanning a target behind a stateless (non-stateful) firewall. 
A stateless firewall will check if the incoming packet has the SYN flag set to detect a connection attempt. 
Using a flag combination that does not match the SYN packet makes it possible to deceive the firewall and reach the system behind it. 
However, a stateful firewall will practically block all such crafted packets and render this kind of scan useless.
------





Maimon Scan

In this scan, the FIN and ACK bits are set. The target should send an RST packet as a response. However, certain BSD-derived systems drop the packet if it is an open port exposing the open ports. 
This scan won’t work on most targets encountered in modern networks
Command: -sM

Most target systems respond with an RST packet regardless of whether the TCP port is open.





TCP ACK Scan

ACK scan will send a TCP packet with the ACK flag set.
Command: -sA

The target would respond to the ACK with RST regardless of the state of the port. 
This behaviour happens because a TCP packet with the ACK flag set should be sent only in response to a received TCP packet to acknowledge the receipt of some data.

This kind of scan would be helpful if there is a firewall in front of the target. Consequently, based on which ACK packets resulted in responses, you will learn which ports were not blocked by the firewall. 
In other words, this type of scan is more suitable to discover firewall rule sets and configuration.





Window Scan

The TCP window scan is almost the same as the ACK scan; however, it examines the TCP Window field of the RST packets returned. On specific systems, this can reveal that the port is open.
Command: -sW

Similarly, launching a TCP window scan against a Linux system with no firewall will not provide much information.

However, as you would expect, if we repeat our TCP window scan against a server behind a firewall, we expect to get more satisfying results.





Custom Scan

If you want to experiment with a new TCP flag combination beyond the built-in TCP scan types, you can do so using --scanflags

If you want to set SYN, RST, and FIN simultaneously, you can do so using --scanflags RSTSYNFIN

It is essential to note that the ACK scan and the window scan were very efficient at helping us map out the firewall rules. 
However, it is vital to remember that just because a firewall is not blocking a specific port, it does not necessarily mean that a service is listening on that port. 
For example, there is a possibility that the firewall rules need to be updated to reflect recent service changes. 
Hence, ACK and window scans are exposing the firewall rules, not the services.





Spoofing and Decoys

In some network setups, you will be able to scan a target system using a spoofed IP address and even a spoofed MAC address. Such a scan is only beneficial in a situation where you can guarantee to capture the response.
If you try to scan a target from some random network using a spoofed IP address, chances are you won’t have any response routed to you, and the scan results could be unreliable.

Example:
nmap -S SPOOFED_IP 10.10.64.34

The target machine will respond to the incoming packets sending the replies to the destination IP address SPOOFED_IP. 
For this scan to work and give accurate results, the attacker needs to monitor the network traffic to analyze the replies. 


nmap -e NET_INTERFACE -Pn -S SPOOFED_IP 10.10.64.34

specify the network interface using -e
explicitly disable ping scan -Pn

\
When you are on the same subnet as the target machine, you would be able to spoof your MAC address as well.
You can specify the source MAC address using --spoof-mac SPOOFED_MAC
This address spoofing is only possible if the attacker and the target machine are on the same Ethernet (802.3) network or same WiFi (802.11).

The concept is simple, make the scan appear to be coming from many IP addresses so that the attacker’s IP address would be lost among them. 
As we see in the figure below, the scan of the target machine will appear to be coming from 3 different sources, and consequently, the replies will go the decoys as well.

You can launch a decoy scan by specifying a specific or random IP address after -D

nmap -D 10.10.0.1,10.10.0.2,ME 10.10.64.34
-D	Enables decoy scanning to confuse intrusion detection systems (IDS)
10.10.0.1,10.10.0.2,ME	Specifies decoy IPs: two fake IPs (10.10.0.1 and 10.10.0.2) and ME indicates your real IP is in the mix

Another example command would be 
nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME 10.10.64.34, 
where the third and fourth source IP addresses are assigned randomly, while the fifth source is going to be the attacker’s IP address. 




Fragmented Packets

Nmap provides the option -f to fragment packets. Once chosen, the IP data will be divided into 8 bytes or less.
Adding another -f (-f -f or -ff) will split the data into 16 byte-fragments instead of 8. You can change the default value by using the --mtu; however, you should always choose a multiple of 8.




Idle/Zombie Scan

The idle scan, or zombie scan, requires an idle system connected to the network that you can communicate with.
Practically, Nmap will make each probe appear as if coming from the idle (zombie) host, then it will check for indicators whether the idle (zombie) host received any response to the spoofed probe. 
This is accomplished by checking the IP identification (IP ID) value in the IP header. You can run an idle scan using nmap -sI ZOMBIE_IP MACHINE_IP, where ZOMBIE_IP is the IP address of the idle host (zombie). 

-sI	Stands for Idle Scan
ZOMBIE_IP	IP address of a "zombie" host (an idle system used to perform the scan indirectly)
MACHINE_IP	The target you want to scan

The idle (zombie) scan requires the following three steps to discover whether a port is open:

    Trigger the idle host to respond so that you can record the current IP ID on the idle host.
    Send a SYN packet to a TCP port on the target. The packet should be spoofed to appear as if it was coming from the idle host (zombie) IP address.
    Trigger the idle machine again to respond so that you can compare the new IP ID with the one received earlier.




Other details

You might consider adding --reason if you want Nmap to provide more details regarding its reasoning and conclusions. 
Providing the --reason flag gives us the explicit reason why Nmap concluded that the system is up or a particular port is open.

For more detailed output, you can consider using -v for verbose output or -vv for even more verbosity.

If -vv does not satisfy your curiosity, you can use -d for debugging details or -dd for even more details. 
You can guarantee that using -d will create an output that extends beyond a single screen.












